<!--
  * Copyright 2013 BlackBerry Limited.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
-->
<!--
  *=================================================================================
  * The ecl_test.htm is a small test application that can be used to send requests
  * to the enterprise server to push an emergency contact list to a device/phone.
  *=================================================================================

If you are running this locally as a file or on a server other than the BES, you may need 
to enable XSS on your web-browser for the POST and response codes:

IE:
	Tools–>Internet Options->Security Tab->Custom Level->DISABLE XSS Filter 
Firefox:
    type "about:config" in url -> then set browser.urlbar.filter.javascript = false
Chrome on a PC:
	C:\Users\[your username goes here]\AppData\Local\Google\Chrome\Application\chrome.exe –args –disable-web-security
Chrome on a Mac:
	/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security
	

To generate unique content (This example: 5 unique categories, with 10 contacts each)
Paste this at http://www.json-generator.com/:

[
    '{{repeat(5)}}',
{ title: 'Team {{company}}', 
  list: [
    '{{repeat(10)}}',
    {
        name: '{{firstName}} {{surname}}',
        title: '{{company}} of {{company}}',
        officePhone: '+1 {{phone}}',
        cellPhone: '+1 {{phone}}',
        email: '{{email}}',
        bbPin: '0{{numeric(1000,9999)}}A8F',
        backup: '{{firstName}} {{surname}}'
    }
     ]
    }
]

-->
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>ECL Push Service</title>
        <link href="bb10_table.css" rel="stylesheet" type="text/css">
    </head>

    <body>
    	<table border=3>
    	<thead><th colspan=5><h2><center>Emergency Contact List - Push Service</center></h2></th></thead>
    	<tr>
    		<td>Destination PIN / Email: <br/> <input id="email" type="email" value="3346D3D9"/></td>
    		<td>BES Address: <br />	<input id="bes" type="text" size=40 value="attts-fusion01.attlab.sw.rim.net"/></td>
    		<td>MDS-CS Listen Port:   <br/>	<input id="mdsPort" type="number" value="8080"/></td>
        	<td>App listen ID/Port: <br /> <input id="appPort" type="text" value="ecl_webworks2"/></td>
    		<td width=30><div id="message" align="center"><i>MESSAGES</i></div></td>
        <tr><td colspan=4>
        	<font size=+1><b>Content to Push:</b> </font> &nbsp;&nbsp;
        	<input style="" type="radio" name="contentSelection" onclick="setContent(1);" checked="checked">Small List (&lt;8K)
        	<input type="radio" name="contentSelection" onclick="setContent(2);">Normal List
        	<input type="radio" name="contentSelection" onclick="setContent(3);">BIG List (&gt;8K)
        	<input type="radio" name="contentSelection" onclick="setContent(4);">HUGE List (&gt;32K)
        	<input type="radio" name="contentSelection" onclick="setContent(5);">Clear
        	<br/>
	        <textarea id="content" rows="20" cols="80" onchange="updateSizes()"></textarea>
    		</td>
       		<td>
       			<button onclick="doPost();"><h2> Do PUSH! </h2></button>
       			<br/><hr/><br/>
        		
        		Size: <input READONLY size=30 id="content_size" type="text" value="">
        		<br/><hr/><br/>
        		
        		Compression ratio:<br/>
        		<select id=compress_ratio>
        		<option value="1">1-Least compression, Fast</option>
        		<option value="5" SELECTED>5-Medium compression, Good</option>
        		<option value="7">7-Best compression, Slow</option>
        		</select><br/>
        		
        		<button onclick="doCompress();"> Compress! </button>
	       		<button onclick="unCompress();"> Un-Compress... </button>

        	</td>        	
        </tr>
	
		<tr><td colspan=4>    
    	    <form id="convertForm" name="convertForm" onsubmit="return false; ">
            <label for="csv">
                <acronym title="comma-separated values">Import Excel / CSV</acronym>:</label><br />
                <textarea id="csv" name="csv" rows="10" cols="60"></textarea><br />
            <input type="button" value="Convert" onclick="xlsToJson();updateSizes()" /> 
            <input type="reset" />
        	</form>
        	</td>
        	<td>Size: <input READONLY id="import_size" type="text" value=""></td>
        </tr>
        
        <tr><td colspan=5 style="text-align:left">
        <summary><b>ECL Testing Instructions:</b><br />
            When the ECL application is first run the contact list will be empty.
            This web app provides the ability to send contact lists to the application for testing and demonstrations. 
            It can be run via the browser on your PC as long as JavaScript and Ajax are enabled.
            Enter the email address of user to whom the contact list should be sent. The contact list to send can be selected 
            via radio buttons or manually entered. Click on the 'Do Push' button to send the contact list.<br /><br />
            The contact list will be received on the device just seconds after it is sent and an Emergency Contact List notification 
            will be added to the notification hub. The contact list sent to the device will be shown on 
            the first page of the Emergency Contact List application. Click on a contact to view it. The next screen 
            provides details about the contact. Select a phone number to call, an email address to email, a SMS number to text, 
            or a Primary Backup link to open his/her primary backup's contact information. </summary>
        </td></tr>
        </table>
        
        
<!--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=    
    
	JavaScript fun from here on down... 

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-->        
<!-- Load necessary libraries for Excel / JSON conversion -->
<script src="json/json2.js"></script>
<script src="json/xls2json.js"></script>

<!-- Awesome compression library -->
<script src="js/lzma.js"></script>

<!-- Some predefined data sets for fun... -->
<script src="js/data.js"></script>

<script type="text/javascript">
    var csvRows = []; var objArr = [];
    var benchmarkStart, benchmarkParseEnd, benchmarkObjEnd, benchmarkJsonEnd, benchmarkPopulateEnd;
	var my_lzma = new LZMA("js/lzma_worker.js");
			
	function updateSizes() {
		if (document.getElementById('content').value.length>0) {
			// Calculate size of content box
			//myBytes = Number(unescape(encodeURIComponent((document.getElementById('content').value)).length));
			myBytes = Number(document.getElementById('content').value.length);
			document.getElementById('content_size').value = myBytes.toLocaleString() + ' bytes ('+(myBytes/1024).toFixed(1)+'K)';
		}
		//if (document.getElementById('csv').value.length>0) 
			//document.getElementById('import_size').value = ((document.getElementById('csv').value.length / 1024).toFixed(4)) + 'K';
    }  
        	
    function setContent(reqNum) {
        var teamList = (reqNum==1)?teamList1 : (reqNum==2)?teamList2 : (reqNum==3)?teamList3 : (reqNum==4)?teamList4 :[{"title":"","list":""}];
                    
        var jsonStr = JSON.stringify(teamList);
        document.getElementById("content").value = jsonStr;
        updateSizes();
    }

	if (!String.prototype.trim) {
		String.prototype.trim = function () {
			return this.replace(/^\s+|\s+$/, "");
		}
	}

	function is_array(input) {
		return typeof (input) === "object" && (input instanceof Array);
	}

	function convert2Bytes(hex_str) {
		var count = 0, hex_arr, hex_data = [], hex_len, i;
		if (hex_str.trim() == "") return [];
		// Check for invalid hex characters.
		if (/[^0-9a-fA-F\s]/.test(hex_str)) return false;
		// Split on every 2 characters... pack it in tight!
		hex_arr = hex_str.match(/.{2}/g);
		hex_len = hex_arr.length;
		for (i = 0; i < hex_len; ++i) {
			if (hex_arr[i].trim() == "") continue;
			hex_data[count++] = parseInt(hex_arr[i], 16);
		}
		return hex_data;
	}

	function convert2Hex(byte_arr) {
		var hex_str = "", i, len, tmp_hex;
		if (!is_array(byte_arr)) return false;
		len = byte_arr.length;
		for (i = 0; i < len; ++i) {
			if (byte_arr[i] < 0) byte_arr[i] = byte_arr[i] + 256;
			tmp_hex = byte_arr[i].toString(16);
			// Add leading zero.
			if (tmp_hex.length == 1) tmp_hex = "0" + tmp_hex;
			hex_str += tmp_hex;
		}
		return hex_str.trim();
	}

	function createCORSRequest(method, url) {
	  var xhr = new XMLHttpRequest();
	  if ("withCredentials" in xhr) {
	    // Check if the XMLHttpRequest object has a "withCredentials" property.
	    // "withCredentials" only exists on XMLHTTPRequest2 objects.
	    xhr.open(method, url, true);
	  } else if (typeof XDomainRequest != "undefined") {
	    // Otherwise, check if XDomainRequest.
    	    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
    	    xhr = new XDomainRequest();
    	    xhr.open(method, url);
 	  } else {
    	    // Otherwise, CORS is not supported by the browser.
    	    xhr = null;
  	  }
  	  return xhr;
	}

    function doPost(){
        var xmlhttp = new XMLHttpRequest(); 
        var bes = document.getElementById("bes").value;
        var mdsPort = document.getElementById("mdsPort").value;
        var email = document.getElementById("email").value;
        var appPort = document.getElementById("appPort").value;
        var content = document.getElementById("content").value;

	    // BlackBerry Push response codes...
	    var responseCodes = {
		'0' : 'ERROR: The request did not make it to the BES server.\n\nIt is likely down for maintenance.  Please check with your IT support to ensure services on '+bes+' are running correctly and try your PUSH again.',
		'200' : 'SUCCESS: The push request was sent and accepted by the BlackBerry MDS Connection Service.',
		'400' : 'ERROR: A general error occurred.',
		'403' : 'ERROR: The BlackBerry device is not associated with the BlackBerry Device Service, or push access control has been enabled on the BlackBerry Device Service and the server making the push request does not have permission to push data.',
		'404' : 'ERROR: The push request was not received by the BlackBerry MDS Connection Service.\n\nVerify that you have supplied the correct URL and application ID passed in the port field for the BlackBerry MDS Connection Service in your push request.',
		'413' : 'ERROR: Payload too large or over the server limit.  This results from your PUSH data being greater than the 8K limit.  You may reduce or COMPRESS your data and try again.',
		'503' : 'ERROR: The BlackBerry MDS Connection Service is busy or is unable to manage the push request due to temporary overloading or server maintenance.\n\nBy default, the BlackBerry MDS Connection Service is configured to manage 1000 simultaneous push requests, including push requests that have previously been accepted and are pending delivery.' };

        if (mdsPort != "") { mdsPort = ":" + mdsPort }
  	    var url = "http://" + bes + mdsPort + "/push?DESTINATION=" + email + "&PORT=" + appPort + "&REQUESTURI=/";
/*
	    // Here's an example of using CORS for callback values, you need header support on
	    // your server for this to work: 
	    var xhr = createCORSRequest('POST', url);
  	    if (!xhr) {
    		alert('CORS not supported');
    		return;
  	    }
  	    // Response handlers.
  	    xhr.onload = function() {
    	   	var text = xhr.responseText;
		console.log('Status: '+xhr.status);
		console.log(xmlhttp);
		alert("BlackBerry Push Results\n=-=-=-=-=-=-=-=-=\n"+responseCodes[xhr.status]);
		console.log('CORS response: '+text);
  	    };
  	    xhr.onerror = function() {
    		alert('Couldn\'t find the server at:\n'+bes+':'+mdsPort+', please check the configuration settings and retry.');
  	    };
  	    xhr.send(content);
	    console.log('Sent CORS');
*/
	    xmlhttp.open('POST', url, true);
	    xmlhttp.onreadystatechange=function() {
		    if (xmlhttp.readyState==4) {
		    var error = (responseCodes[xmlhttp.status]) ? responseCodes[xmlhttp.status] : 'An unknown error has occurred:\n\n' + xmlhttp.responseText;
			alert("BlackBerry Push Results\n=-=-=-=-=-=-=-=-=\n"+error);
            //document.getElementById("message").innerHtml = "Push successfully sent!";
        	}
        }
        
    	xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        // Never trust the browser to do this correctly, besides - LZMA is way better
        //xmlhttp.setRequestHeader("Content-Encoding", "gzip");
        xmlhttp.send(content);
     }    

     function unCompress() {
            var content = document.getElementById("content").value;
			// Convert the string back into a ByteArray using cool JSON util
            //byteArr = JSON.parse(content);
            
            // Use more efficient HEX routines for storing ByteArray (convert2Bytes)
            var byteArr = convert2Bytes(content);
            my_lzma.decompress( byteArr, function (result) {
				// Update with the compressed payload
        		document.getElementById('content').value = result;        		
        		updateSizes();
			}, function (percent) {
        		// Compressing progress code goes here.
        		document.getElementById('message').innerHTML = "De-compressing: " + (percent * 100) + "%";
    		});
     }  

     function doCompress() {               
			// Really compress that content using webworkers...
			var compress_ratio = document.getElementById('compress_ratio').value;
            var content = document.getElementById("content").value;
            my_lzma.compress( content, compress_ratio, function (result) {
            	//var compressed = JSON.stringify(result);
                // Use more efficient HEX routines for restoring ByteArray
            	var compressed = convert2Hex(result);
                var compression = (((content.length-compressed.length)/content.length)*100).toFixed(2);

				// Update with the compressed payload
        		document.getElementById('content').value = compressed;        		
        		document.getElementById('message').innerHTML = "Compressed " + compression + "%!";
        		updateSizes();
			}, function (percent) {
        		// Compressing progress code goes here.
        		document.getElementById('message').innerHTML = "Compressing: " + (percent * 100) + "%";
    		});
    }
                
	setContent(1); // default to first contact list
</script>
</body>
</html>
